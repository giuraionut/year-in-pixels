generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./year_in_pixels.db"
}

model User {
  id            String    @id @default(uuid()) // String ID using UUID
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  moods         Mood[]
  events        Event[]
  pixels        Pixel[]
  diaries       Diary[]
}

model Account {
  id                String   @id @default(uuid())  // String ID using UUID
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token        String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token           String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())  // String ID using UUID
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Mood {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  name   String
  color  String
  pixels MoodToPixel[] // Changed: Relation to join table

  @@unique([id, userId])
}

model Event {
  id        String   @id @default(uuid())  // String ID using UUID
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  name   String
  pixels PixelToEvent[]

  @@unique([id, userId])
}

model Pixel {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  moods   MoodToPixel[] // Changed: Relation to join table
  events PixelToEvent[]
  pixelDate DateTime @default(now())

  @@unique([userId, pixelDate])
}
model Diary {
  id        String   @id @default(uuid())  // String ID using UUID
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  content   String?
  diaryDate DateTime @default(now())

  @@unique([id, userId, diaryDate])
}


//join tables
model PixelToEvent {
  pixel   Pixel   @relation(fields: [pixelId], references: [id], onDelete: Cascade)
  pixelId String
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  @@id([pixelId, eventId])
}

model MoodToPixel { // New Join Table
    pixel   Pixel   @relation(fields: [pixelId], references: [id], onDelete: Cascade)
    pixelId String
    mood   Mood   @relation(fields: [moodId], references: [id], onDelete: Cascade)
    moodId String

    @@id([pixelId, moodId])
}