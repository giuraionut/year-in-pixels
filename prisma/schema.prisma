generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid()) // String ID using UUID
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  moods         Mood[]
  events        Event[]
  pixels        Pixel[]
  diaries       Diary[]
}

model Account {
  id                String   @id @default(uuid()) // String ID using UUID
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // <-- ADD THIS COMPOUND UNIQUE INDEX
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid()) // String ID using UUID
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model Mood {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  color  String
  pixels MoodToPixel[]

  @@unique([userId, name])
  @@index([userId])
}

model Event {
  id        String   @id @default(uuid()) // String ID using UUID
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name   String
  pixels PixelToEvent[]

  @@unique([userId, name])
  @@index([userId])
}

model Pixel {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  moods     MoodToPixel[] // Changed: Relation to join table
  events    PixelToEvent[]
  pixelDate DateTime       @default(now())

  @@unique([userId, pixelDate])
  @@index([pixelDate])
}

model Diary {
  id        String   @id @default(uuid()) // String ID using UUID
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  content   String?
  updatedAt DateTime @updatedAt

  @@unique([userId, createdAt])
}

//join tables
model PixelToEvent {
  pixel   Pixel  @relation(fields: [pixelId], references: [id], onDelete: Cascade)
  pixelId String
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId String

  @@id([pixelId, eventId])
}

model MoodToPixel {
  pixel   Pixel  @relation(fields: [pixelId], references: [id], onDelete: Cascade)
  pixelId String
  mood    Mood   @relation(fields: [moodId], references: [id], onDelete: Cascade)
  moodId  String

  @@id([pixelId, moodId])
}
